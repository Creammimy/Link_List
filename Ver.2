public class ListNum {
    private Node head = null;

    // ... (Existing code) ...

    // 1. Finding the size of the linked list
    public int size() {
        int count = 0;
        Node current = head;
        while (current != null) {
            count++;
            current = current.getLink();
        }
        return count;
    }

    // 2. Adding to the end of the list
    public void addToEnd(int newInfo) {
        Node newNode = new Node(newInfo);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.getLink() != null) {
                current = current.getLink();
            }
            current.setLink(newNode);
        }
    }

    // 3. Inserting in sorted order
    public void insertSorted(int newInfo) {
        Node newNode = new Node(newInfo);
        if (head == null || newInfo <= head.getInfo()) {
            newNode.setLink(head);
            head = newNode;
            return;
        }
        Node current = head;
        while (current.getLink() != null && newInfo > current.getLink().getInfo()) {
            current = current.getLink();
        }
        newNode.setLink(current.getLink());
        current.setLink(newNode);
    }

    // 4. Removing from the front of the list
    public void removeFromFront() {
        if (head != null) {
            head = head.getLink();
        }
    }

    // 5. Removing from the end of the list
    public void removeFromEnd() {
        if (head == null || head.getLink() == null) {
            head = null;
            return;
        }
        Node current = head;
        while (current.getLink().getLink() != null) {
            current = current.getLink();
        }
        current.setLink(null);
    }

    // 6. Searching for a target number in the list
    public int search(int target) {
        int index = 1;
        Node current = head;
        while (current != null) {
            if (current.getInfo() == target) {
                return index;
            }
            current = current.getLink();
            index++;
        }
        return -1; // Target not found
    }

    // 7. Removing a target number from the list
    public void remove(int target) {
        if (head == null) {
            return;
        }
        if (head.getInfo() == target) {
            head = head.getLink();
            return;
        }
        Node current = head;
        while (current.getLink() != null) {
            if (current.getLink().getInfo() == target) {
                current.setLink(current.getLink().getLink());
                return;
            }
            current = current.getLink();
        }
    }

    public static void main(String[] args) {
        ListNum listNum1 = new ListNum();
        listNum1.addNode(10);
        listNum1.addNode(20);
        listNum1.addNode(30);

        System.out.println("Original List:");
        System.out.println(listNum1);

        // Test the new methods
        System.out.println("Size: " + listNum1.size());

        listNum1.addToEnd(40);
        System.out.println("List after adding 40 to the end:");
        System.out.println(listNum1);

        listNum1.insertSorted(5);
        System.out.println("List after inserting 5 in sorted order:");
        System.out.println(listNum1);

        listNum1.removeFromFront();
        System.out.println("List after removing from the front:");
        System.out.println(listNum1);

        listNum1.removeFromEnd();
        System.out.println("List after removing from the end:");
        System.out.println(listNum1);

        int searchTarget = 20;
        int searchResult = listNum1.search(searchTarget);
        if (searchResult != -1) {
            System.out.println("Found " + searchTarget + " at position " + searchResult);
        } else {
            System.out.println(searchTarget + " not found in the list.");
        }

        int removeTarget = 30;
        listNum1.remove(removeTarget);
        System.out.println("List after removing " + removeTarget + ":");
        System.out.println(listNum1);
    }
}
